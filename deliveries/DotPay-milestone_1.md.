# Milestone Delivery :mailbox:

**The [invoice form :pencil:](https://docs.google.com/forms/d/e/1FAIpQLSfmNYaoCgrxyhzgoKQ0ynQvnNRoTmgApz9NrMp-hd8mhIiO0A/viewform) has been filled out correctly for this milestone and the delivery is according to the official [milestone delivery guidelines](https://github.com/w3f/Grants-Program/blob/master/docs/milestone-deliverables-guidelines.md).**  

* **Application Document:** https://github.com/AdaLam7/Grants-Program/blob/master/applications/DotPay.md
* **PR Link:** 
* **Milestone Number:** 1

> Please provide a list of all deliverables of the milestone extracted from the initial application and a link to the deliverable itself. Ideally all links inside the below table should include a commit hash, which will be used for testing. If you don't provide a commit hash, we will work off the default branch of your repository. Thus, if you plan on continuing work after delivery, we suggest you create a separate branch for either the delivery or your continuing work. 
>
> If there is anything particular about any of the deliverables we or a future reader should know, use the respective `Notes` column.

| Number | Deliverable                     | Link                                                         | Notes                                                        |
| ------ | ------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |
| 0a.    | License                         | [Apache 2.0](https://github.com/bytepayment/dot-pay-client/blob/main/LICENSE) |                                                              |
| 0b.    | Documentation                   |                                                                               | Dotpay user guide, workflow, and what is dotpay.  |
| 0c.    | Testing Guide                   | [https://github.com/Cumulus2021/cess#run-tests](https://github.com/Cumulus2021/cess#run-tests) | Core functions in pallets are covered by unit tests to ensure functionality and robustness. Tests can be run in the docker container also. |
| 0d.    |  Docker              | [https://github.com/Cumulus2021/cess#module-documentation](https://github.com/bytepayment/dot-pay-client/blob/main/docker-compose.yml) | We will provide Dockerfile and docker image to run the website in one command line  |
| 1.    | User management, create an polkadot account for each developer    | [https://github.com/Cumulus2021/cess/tree/main/c-pallets/files-bank](https://github.com/Cumulus2021/cess/tree/main/c-pallets/files-bank) | Contains operations related info of files on multi-direction. |
| 2.   | Repo & webhook management     | [https://github.com/Cumulus2021/cess/tree/main/c-pallets/files-map](https://github.com/Cumulus2021/cess/tree/main/c-pallets/files-map) | Management to stored file routing.                           |
| 3.    | Address binding | [https://github.com/Cumulus2021/cess/tree/main/c-pallets/sminer](https://github.com/Cumulus2021/cess/tree/main/c-pallets/sminer) | Contains operations related storage miners.                  |
| 4.     |Recharge management                         | [https://github.com/Cumulus2021/cess#run-in-docker](https://github.com/Cumulus2021/cess#run-in-docker) |                                                              |
| 5.     | Transfer ink! contract                          | [https://github.com/Cumulus2021/cess#run-in-docker](https://github.com/Cumulus2021/cess#run-in-docker) |                                                              |

1

| Number | Deliverable | Specification |
| ------------- | ------------- | ------------- |
| 0a. | License | Apache 2.0 |
| 0b. | Documentation | Dotpay user guide, workflow, and what is dotpay. |
| 0c. |  | We will provide uni test for user management and recharge management modules(70% cover), the two module UI test report |
| 0d. | Docker | We will provide Dockerfile and docker image to run the website in one command line |
| 1. | User management, create an polkadot account for each developer | We will provide login function, you can login our website using github, and we will create an polkadot account for each user by default |
| 2. | Repo & webhook management| We will fetch your github repo list, so you can active the repo you want integrate with polkadot, the webhook module will listen the pay event and tigger transform module to pay developer DOT |
| 3. | Address binding | Develop using github issue comment to bind there polkadot address. `/dotpay bind [address]` |
| 4. | Recharge management | Recharge DOT to your platform account |
| 5. | Transfer ink! contract| We will provide an tested ink! contract on Substrate Smart Contracts Node, provide transfer limit, witelist and transfer function. The platform will integrate the contract when the Polkadot mainnet contract para chain is available. |
